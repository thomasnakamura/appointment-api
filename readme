# üè• Appointment API

API RESTful desenvolvida para gerenciar **agendamentos m√©dicos** entre **clientes** e **especialistas**, garantindo **disponibilidade**, **seguran√ßa** e **automa√ß√£o** de processos.

---

## ‚úÖ Funcionalidades implementadas

### üßë‚Äç‚öïÔ∏è Cadastro e gerenciamento de Especialistas

* Cadastro de disponibilidade de hor√°rios (`availability`).
* CRUD completo de especialistas.
* Atualiza√ß√£o din√¢mica da disponibilidade.

### üßë‚Äçüíº Cadastro e gerenciamento de Clientes

* CRUD completo de clientes.
* Associa√ß√£o com `User` autenticado.

### üìÖ Agendamentos

* CRUD completo de agendamentos:

  * Criar, listar, atualizar status e cancelar.
* **Valida√ß√£o de disponibilidade**:

  * N√£o permite ultrapassar `dailyLimit`.
  * Respeita `minIntervalMinutes`.
  * Impede duplo agendamento no mesmo hor√°rio.
  * Respeita dias e hor√°rios da disponibilidade cadastrada.

### üîç Consulta de hor√°rios dispon√≠veis

* Consulta de hor√°rios **livres** por:

  * **Especialidade**
  * **Data**
* Considera disponibilidade cadastrada e agendamentos j√° realizados.

### üîê Autentica√ß√£o e autoriza√ß√£o

* JWT Token.
* Prote√ß√£o de rotas com middleware `authenticate`.
* Controle de acesso por `role` (`client`, `specialist`, `admin`).

### ‚è∞ Automa√ß√£o com Node Cron

* Jobs di√°rios √†s **8h**:

  * Notifica√ß√£o de agendamentos.
  * Marca√ß√£o autom√°tica de `Appointments` como `expired`.

### üõ†Ô∏è ORM e Migrations

* **Prisma ORM** com:

  * Migra√ß√µes **versionadas**.
  * Schema gerenciado em `prisma/schema.prisma`.
  * Gera√ß√£o autom√°tica do Prisma Client.

---

## üöÄ Como rodar o projeto

### Pr√©-requisitos:

* Node.js >= 18.x
* PostgreSQL ou MySQL
* Prisma CLI
* Docker (opcional, para banco de dados)

---

### 1. Clone o reposit√≥rio:

```bash
git clone <repo-url>
cd appointment-api
```

### 2. Instale as depend√™ncias:

```bash
npm install
```

### 3. Configure o `.env`:

```env
DATABASE_URL="postgresql://user:password@localhost:5432/dbname"
JWT_SECRET="sua-chave-secreta"
```

### 4. Suba com Docker Compose:

Para rodar o projeto de forma simples, basta utilizar o Docker Compose, que j√° cuidar√° de subir o banco de dados, gerar o Prisma Client e aplicar as migra√ß√µes automaticamente.

1. Ajuste o `DATABASE_URL` no `.env` para:

```env
DATABASE_URL="postgresql://user:password@db:5432/dbname"
```

2. Suba os containers:

```bash
docker-compose up --build
```

3. Acesse a aplica√ß√£o em: `http://localhost:3000`

> **Obs.:** N√£o √© necess√°rio rodar `npx prisma generate` nem `npx prisma migrate dev` manualmente, pois isso ser√° feito automaticamente na inicializa√ß√£o do container.

```bash
npm run dev
```

### üöÄ Subindo com Docker Compose:
1. Ajuste o `DATABASE_URL` no `.env` para:

```env
DATABASE_URL="postgresql://user:password@db:5432/dbname"
```

2. Suba os containers:

```bash
docker-compose up --build
```

3. Acesse a aplica√ß√£o em: `http://localhost:3000`

---

## üìù Documenta√ß√£o das rotas principais

> A documenta√ß√£o completa e interativa est√° dispon√≠vel em: `/docs`

| M√©todo | Rota                                      | Descri√ß√£o                      |
| ------ | ----------------------------------------- | ------------------------------ |
| POST   | `/auth/register`                          | Cadastro de usu√°rio            |
| POST   | `/auth/login`                             | Login e gera√ß√£o de token       |
| POST   | `/clients`                                | Criar cliente                  |
| GET    | `/clients/:id`                            | Buscar cliente                 |
| POST   | `/specialists`                            | Criar especialista             |
| PUT    | `/specialists/:id/availability`           | Atualizar disponibilidade      |
| GET    | `/specialists/available?specialty=&date=` | Consultar hor√°rios dispon√≠veis |
| POST   | `/appointments`                           | Criar agendamento              |
| GET    | `/appointments`                           | Listar agendamentos            |
| PATCH  | `/appointments/:id/status`                | Atualizar status               |
| DELETE | `/appointments/:id`                       | Cancelar agendamento           |

---

## ‚úÖ Principais tecnologias

* **Node.js** + **Express**
* **Prisma ORM** + Migrations
* **JWT** para autentica√ß√£o
* **Node Cron** para automa√ß√£o
* **TypeScript** para tipagem segura
* **Swagger UI** para documenta√ß√£o da API

---

* Documenta√ß√£o centralizada e manual via **Swagger** (/docs).

---